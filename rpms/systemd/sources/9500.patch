From 24c8408480f7e69eeb0526808e9db62dde3e0316 Mon Sep 17 00:00:00 2001
From: Zsolt Dollenstein <zsol.zsol@gmail.com>
Date: Tue, 3 Jul 2018 12:22:29 -0700
Subject: [PATCH 1/3] Add support for opening files for appending or truncation

Fixes #8983
---
 man/systemd.exec.xml                               |  7 +++-
 src/core/dbus-execute.c                            | 38 +++++++++++++++++-----
 src/core/execute.c                                 | 23 +++++++++++--
 src/core/execute.h                                 |  2 ++
 src/core/load-fragment.c                           | 22 +++++++++++++
 src/core/main.c                                    |  4 +--
 src/test/test-execute.c                            |  7 ++++
 test/meson.build                                   |  3 ++
 .../exec-standardoutput-append.service             | 12 +++++++
 test/test-execute/exec-standardoutput-file.service | 12 +++++++
 .../exec-standardoutput-truncate.service           | 12 +++++++
 11 files changed, 129 insertions(+), 13 deletions(-)
 create mode 100644 test/test-execute/exec-standardoutput-append.service
 create mode 100644 test/test-execute/exec-standardoutput-file.service
 create mode 100644 test/test-execute/exec-standardoutput-truncate.service

diff --git a/man/systemd.exec.xml b/man/systemd.exec.xml
index 68291c145e7..b6a71226acf 100644
--- a/man/systemd.exec.xml
+++ b/man/systemd.exec.xml
@@ -1749,7 +1749,8 @@ SystemCallErrorNumber=EPERM</programlisting>
         of <option>inherit</option>, <option>null</option>, <option>tty</option>, <option>journal</option>,
         <option>syslog</option>, <option>kmsg</option>, <option>journal+console</option>,
         <option>syslog+console</option>, <option>kmsg+console</option>,
-        <option>file:<replaceable>path</replaceable></option>, <option>socket</option> or
+        <option>file:<replaceable>path</replaceable></option>, <option>append:<replaceable>path</replaceable></option>,
+        <option>truncate:<replaceable>path</replaceable></option>, <option>socket</option> or
         <option>fd:<replaceable>name</replaceable></option>.</para>
 
         <para><option>inherit</option> duplicates the file descriptor of standard input for standard output.</para>
@@ -1786,6 +1787,10 @@ SystemCallErrorNumber=EPERM</programlisting>
         specified path refers to an <constant>AF_UNIX</constant> socket in the file system, as in that case only a
         single stream connection is created for both input and output.</para>
 
+        <para><option>append:<replaceable>path</replaceable></option> and <option>truncate:<replaceable>path
+        </replaceable></option> are similar to <option>file:<replaceable>path</replaceable></option> above,
+        but they open the file and truncate it or append to its end, instead of writing from the beginning.
+
         <para><option>socket</option> connects standard output to a socket acquired via socket activation. The
         semantics are similar to the same option of <varname>StandardInput=</varname>, see above.</para>
 
diff --git a/src/core/dbus-execute.c b/src/core/dbus-execute.c
index c44970c10c8..1083909c6e1 100644
--- a/src/core/dbus-execute.c
+++ b/src/core/dbus-execute.c
@@ -1731,7 +1731,10 @@ int bus_exec_context_set_transient_property(
 
                 return 1;
 
-        } else if (STR_IN_SET(name, "StandardInputFile", "StandardOutputFile", "StandardErrorFile")) {
+        } else if (STR_IN_SET(name,
+                              "StandardInputFile",
+                              "StandardOutputFile", "StandardOutputFileToTruncate", "StandardOutputFileToAppend",
+                              "StandardErrorFile", "StandardErrorFileToTruncate", "StandardErrorFileToAppend")) {
                 const char *s;
 
                 r = sd_bus_message_read(message, "s", &s);
@@ -1755,23 +1758,42 @@ int bus_exec_context_set_transient_property(
                                 c->std_input = EXEC_INPUT_FILE;
                                 unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardInput=file:%s", s);
 
-                        } else if (streq(name, "StandardOutputFile")) {
+                        } else if (STR_IN_SET(name, "StandardOutputFile", "StandardOutputFileToTruncate", "StandardOutputFileToAppend")) {
+                                const char *setting;
                                 r = free_and_strdup(&c->stdio_file[STDOUT_FILENO], empty_to_null(s));
                                 if (r < 0)
                                         return r;
 
-                                c->std_output = EXEC_OUTPUT_FILE;
-                                unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardOutput=file:%s", s);
-
+                                if (streq(name, "StandardOutputFile")) {
+                                        c->std_output = EXEC_OUTPUT_FILE;
+                                        unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardOutput=file:%s", s);
+                                } else if (streq(name, "StandardOutputFileToTruncate")) {
+                                        c->std_output = EXEC_OUTPUT_FILE_TRUNCATE;
+                                        unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardOutput=truncate:%s", s);
+                                } else {
+                                        assert(streq(name, "StandardOutputFileToAppend"));
+                                        c->std_output = EXEC_OUTPUT_FILE_APPEND;
+                                        unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardOutput=append:%s", s);
+                                }
                         } else {
-                                assert(streq(name, "StandardErrorFile"));
+                                const char *setting;
+                                assert(STR_IN_SET(name, "StandardErrorFile", "StandardErrorFileToTruncate", "StandardErrorFileToAppend"));
 
                                 r = free_and_strdup(&c->stdio_file[STDERR_FILENO], empty_to_null(s));
                                 if (r < 0)
                                         return r;
 
-                                c->std_error = EXEC_OUTPUT_FILE;
-                                unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardError=file:%s", s);
+                                if (streq(name, "StandardErrorFile")) {
+                                        c->std_error = EXEC_OUTPUT_FILE;
+                                        unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardOutput=file:%s", s);
+                                } else if (streq(name, "StandardErrorFileToTruncate")) {
+                                        c->std_error = EXEC_OUTPUT_FILE_TRUNCATE;
+                                        unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardOutput=truncate:%s", s);
+                                } else {
+                                      assert(streq(name, "StandardErrorFileToAppend"));
+                                      c->std_error = EXEC_OUTPUT_FILE_APPEND;
+                                      unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardOutput=append:%s", s);
+                                }
                         }
                 }
 
diff --git a/src/core/execute.c b/src/core/execute.c
index 8ac69d1a0fb..d91f06a45cc 100644
--- a/src/core/execute.c
+++ b/src/core/execute.c
@@ -675,9 +675,12 @@ static int setup_output(
                 (void) fd_nonblock(named_iofds[fileno], false);
                 return dup2(named_iofds[fileno], fileno) < 0 ? -errno : fileno;
 
-        case EXEC_OUTPUT_FILE: {
+        case EXEC_OUTPUT_FILE:
+        case EXEC_OUTPUT_FILE_APPEND:
+        case EXEC_OUTPUT_FILE_TRUNCATE: {
                 bool rw;
                 int fd;
+                int flags;
 
                 assert(context->stdio_file[fileno]);
 
@@ -687,7 +690,13 @@ static int setup_output(
                 if (rw)
                         return dup2(STDIN_FILENO, fileno) < 0 ? -errno : fileno;
 
-                fd = acquire_path(context->stdio_file[fileno], O_WRONLY, 0666 & ~context->umask);
+                flags = O_WRONLY;
+                if (o == EXEC_OUTPUT_FILE_APPEND)
+                        flags |= O_APPEND;
+                if (o == EXEC_OUTPUT_FILE_TRUNCATE)
+                        flags |= O_TRUNC;
+
+                fd = acquire_path(context->stdio_file[fileno], flags, 0666 & ~context->umask);
                 if (fd < 0)
                         return fd;
 
@@ -4036,8 +4045,16 @@ void exec_context_dump(const ExecContext *c, FILE* f, const char *prefix) {
                 fprintf(f, "%sStandardInputFile: %s\n", prefix, c->stdio_file[STDIN_FILENO]);
         if (c->std_output == EXEC_OUTPUT_FILE)
                 fprintf(f, "%sStandardOutputFile: %s\n", prefix, c->stdio_file[STDOUT_FILENO]);
+        if (c->std_output == EXEC_OUTPUT_FILE_APPEND)
+                fprintf(f, "%sStandardOutputFileToAppend: %s\n", prefix, c->stdio_file[STDOUT_FILENO]);
+        if (c->std_output == EXEC_OUTPUT_FILE_TRUNCATE)
+                fprintf(f, "%sStandardOutputFileToTruncate: %s\n", prefix, c->stdio_file[STDOUT_FILENO]);
         if (c->std_error == EXEC_OUTPUT_FILE)
                 fprintf(f, "%sStandardErrorFile: %s\n", prefix, c->stdio_file[STDERR_FILENO]);
+        if (c->std_error == EXEC_OUTPUT_FILE_APPEND)
+                fprintf(f, "%sStandardErrorFileToAppend: %s\n", prefix, c->stdio_file[STDERR_FILENO]);
+        if (c->std_error == EXEC_OUTPUT_FILE_TRUNCATE)
+                fprintf(f, "%sStandardErrorFileToTruncate: %s\n", prefix, c->stdio_file[STDERR_FILENO]);
 
         if (c->tty_path)
                 fprintf(f,
@@ -4968,6 +4985,8 @@ static const char* const exec_output_table[_EXEC_OUTPUT_MAX] = {
         [EXEC_OUTPUT_SOCKET] = "socket",
         [EXEC_OUTPUT_NAMED_FD] = "fd",
         [EXEC_OUTPUT_FILE] = "file",
+        [EXEC_OUTPUT_FILE_APPEND] = "append",
+        [EXEC_OUTPUT_FILE_TRUNCATE] = "truncate",
 };
 
 DEFINE_STRING_TABLE_LOOKUP(exec_output, ExecOutput);
diff --git a/src/core/execute.h b/src/core/execute.h
index 77ffe823231..b087e01dad2 100644
--- a/src/core/execute.h
+++ b/src/core/execute.h
@@ -56,6 +56,8 @@ typedef enum ExecOutput {
         EXEC_OUTPUT_SOCKET,
         EXEC_OUTPUT_NAMED_FD,
         EXEC_OUTPUT_FILE,
+        EXEC_OUTPUT_FILE_APPEND,
+        EXEC_OUTPUT_FILE_TRUNCATE,
         _EXEC_OUTPUT_MAX,
         _EXEC_OUTPUT_INVALID = -1
 } ExecOutput;
diff --git a/src/core/load-fragment.c b/src/core/load-fragment.c
index 94c7d33117b..1eb7565b7e1 100644
--- a/src/core/load-fragment.c
+++ b/src/core/load-fragment.c
@@ -1015,6 +1015,28 @@ int config_parse_exec_output(
 
                 eo = EXEC_OUTPUT_FILE;
 
+        } else if ((n = startswith(rvalue, "append:"))) {
+
+                r = unit_full_printf(u, n, &resolved);
+                if (r < 0)
+                        return log_syntax(unit, LOG_ERR, filename, line, r, "Failed to resolve unit specifiers in %s: %m", n);
+
+                r = path_simplify_and_warn(resolved, PATH_CHECK_ABSOLUTE | PATH_CHECK_FATAL, unit, filename, line, lvalue);
+                if (r < 0)
+                        return -ENOEXEC;
+
+                eo = EXEC_OUTPUT_FILE_APPEND;
+        } else if ((n = startswith(rvalue, "truncate:"))) {
+
+                r = unit_full_printf(u, n, &resolved);
+                if (r < 0)
+                        return log_syntax(unit, LOG_ERR, filename, line, r, "Failed to resolve unit specifiers in %s: %m", n);
+
+                r = path_simplify_and_warn(resolved, PATH_CHECK_ABSOLUTE | PATH_CHECK_FATAL, unit, filename, line, lvalue);
+                if (r < 0)
+                        return -ENOEXEC;
+
+                eo = EXEC_OUTPUT_FILE_TRUNCATE;
         } else {
                 eo = exec_output_from_string(rvalue);
                 if (eo < 0) {
diff --git a/src/core/main.c b/src/core/main.c
index 44dd8348beb..e7c4b1bcc4e 100644
--- a/src/core/main.c
+++ b/src/core/main.c
@@ -604,8 +604,8 @@ static int config_parse_output_restricted(
                 return 0;
         }
 
-        if (IN_SET(t, EXEC_OUTPUT_SOCKET, EXEC_OUTPUT_NAMED_FD, EXEC_OUTPUT_FILE)) {
-                log_syntax(unit, LOG_ERR, filename, line, 0, "Standard output types socket, fd:, file: are not supported as defaults, ignoring: %s", rvalue);
+        if (IN_SET(t, EXEC_OUTPUT_SOCKET, EXEC_OUTPUT_NAMED_FD, EXEC_OUTPUT_FILE, EXEC_OUTPUT_FILE_APPEND, EXEC_OUTPUT_FILE_TRUNCATE)) {
+                log_syntax(unit, LOG_ERR, filename, line, 0, "Standard output types socket, fd:, file:, append:, truncate: are not supported as defaults, ignoring: %s", rvalue);
                 return 0;
         }
 
diff --git a/src/test/test-execute.c b/src/test/test-execute.c
index fa8efdddd2d..ac7c1823181 100644
--- a/src/test/test-execute.c
+++ b/src/test/test-execute.c
@@ -625,6 +625,12 @@ static void test_exec_standardinput(Manager *m) {
         test(m, "exec-standardinput-file.service", 0, CLD_EXITED);
 }
 
+static void test_exec_standardoutput(Manager *m) {
+        test(m, "exec-standardoutput-file.service", 0, CLD_EXITED);
+        test(m, "exec-standardoutput-file-append.service", 0, CLD_EXITED);
+        test(m, "exec-standardoutput-file-truncate.service", 0, CLD_EXITED);
+}
+
 static int run_tests(UnitFileScope scope, const test_function_t *tests) {
         const test_function_t *test = NULL;
         _cleanup_(manager_freep) Manager *m = NULL;
@@ -672,6 +678,7 @@ int main(int argc, char *argv[]) {
                 test_exec_restrictnamespaces,
                 test_exec_runtimedirectory,
                 test_exec_standardinput,
+                test_exec_standardoutput,
                 test_exec_supplementarygroups,
                 test_exec_systemcallerrornumber,
                 test_exec_systemcallfilter,
diff --git a/test/meson.build b/test/meson.build
index 826e684e590..986bb7f3be1 100644
--- a/test/meson.build
+++ b/test/meson.build
@@ -115,6 +115,9 @@ test_data_files = '''
         test-execute/exec-specifier@.service
         test-execute/exec-standardinput-data.service
         test-execute/exec-standardinput-file.service
+        test-execute/exec-standardoutput-file.service
+        test-execute/exec-standardoutput-append.service
+        test-execute/exec-standardoutput-truncate.service
         test-execute/exec-supplementarygroups-multiple-groups-default-group-user.service
         test-execute/exec-supplementarygroups-multiple-groups-withgid.service
         test-execute/exec-supplementarygroups-multiple-groups-withuid.service
diff --git a/test/test-execute/exec-standardoutput-append.service b/test/test-execute/exec-standardoutput-append.service
new file mode 100644
index 00000000000..6a390aa5717
--- /dev/null
+++ b/test/test-execute/exec-standardoutput-append.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=Test for StandardOutput=append:
+
+[Service]
+ExecStartPre=/bin/sh -c 'echo hello > /tmp/test-exec-standardoutput-output'
+ExecStartPre=/bin/sh -c 'echo -e hello\\\\nhello > /tmp/test-exec-standardoutput-expected'
+ExecStart=/bin/cat
+ExecStartPost=diff /tmp/test-exec-standardoutput-expected /tmp/test-exec-standardoutput-output
+StandardInput=data
+StandardInputText=hello
+StandardOutput=append:/tmp/test-exec-standardoutput-output
+Type=oneshot
diff --git a/test/test-execute/exec-standardoutput-file.service b/test/test-execute/exec-standardoutput-file.service
new file mode 100644
index 00000000000..470dd51d31c
--- /dev/null
+++ b/test/test-execute/exec-standardoutput-file.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=Test for StandardOutput=file:
+
+[Service]
+ExecStartPre=/bin/sh -c 'echo -e nooo\\\\nhello > /tmp/test-exec-standardoutput-output'
+ExecStartPre=/bin/sh -c 'echo -e hello\\\\nello > /tmp/test-exec-standardoutput-expected'
+ExecStart=/bin/cat
+ExecStartPost=diff /tmp/test-exec-standardoutput-expected /tmp/test-exec-standardoutput-output
+StandardInput=data
+StandardInputText=hello
+StandardOutput=file:/tmp/test-exec-standardoutput-output
+Type=oneshot
diff --git a/test/test-execute/exec-standardoutput-truncate.service b/test/test-execute/exec-standardoutput-truncate.service
new file mode 100644
index 00000000000..209b549119f
--- /dev/null
+++ b/test/test-execute/exec-standardoutput-truncate.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=Test for StandardOutput=truncate:
+
+[Service]
+ExecStartPre=/bin/sh -c 'echo -e hello\\\\nhello > /tmp/test-exec-standardoutput-output'
+ExecStartPre=/bin/sh -c 'echo hello > /tmp/test-exec-standardoutput-expected'
+ExecStart=/bin/cat
+ExecStartPost=diff /tmp/test-exec-standardoutput-expected /tmp/test-exec-standardoutput-output
+StandardInput=data
+StandardInputText=hello
+StandardOutput=truncate:/tmp/test-exec-standardoutput-output
+Type=oneshot

From daf139ee25d497e23d21c790007b12f4c3cef606 Mon Sep 17 00:00:00 2001
From: Zsolt Dollenstein <zsol@fb.com>
Date: Tue, 3 Jul 2018 12:40:50 -0700
Subject: [PATCH 2/3] fix build warning and doc error

---
 man/systemd.exec.xml    | 2 +-
 src/core/dbus-execute.c | 2 --
 2 files changed, 1 insertion(+), 3 deletions(-)

diff --git a/man/systemd.exec.xml b/man/systemd.exec.xml
index b6a71226acf..a165bb3786c 100644
--- a/man/systemd.exec.xml
+++ b/man/systemd.exec.xml
@@ -1789,7 +1789,7 @@ SystemCallErrorNumber=EPERM</programlisting>
 
         <para><option>append:<replaceable>path</replaceable></option> and <option>truncate:<replaceable>path
         </replaceable></option> are similar to <option>file:<replaceable>path</replaceable></option> above,
-        but they open the file and truncate it or append to its end, instead of writing from the beginning.
+        but they open the file and truncate it or append to its end, instead of writing from the beginning.</para>
 
         <para><option>socket</option> connects standard output to a socket acquired via socket activation. The
         semantics are similar to the same option of <varname>StandardInput=</varname>, see above.</para>
diff --git a/src/core/dbus-execute.c b/src/core/dbus-execute.c
index 1083909c6e1..77429aae9f8 100644
--- a/src/core/dbus-execute.c
+++ b/src/core/dbus-execute.c
@@ -1759,7 +1759,6 @@ int bus_exec_context_set_transient_property(
                                 unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardInput=file:%s", s);
 
                         } else if (STR_IN_SET(name, "StandardOutputFile", "StandardOutputFileToTruncate", "StandardOutputFileToAppend")) {
-                                const char *setting;
                                 r = free_and_strdup(&c->stdio_file[STDOUT_FILENO], empty_to_null(s));
                                 if (r < 0)
                                         return r;
@@ -1776,7 +1775,6 @@ int bus_exec_context_set_transient_property(
                                         unit_write_settingf(u, flags|UNIT_ESCAPE_SPECIFIERS, name, "StandardOutput=append:%s", s);
                                 }
                         } else {
-                                const char *setting;
                                 assert(STR_IN_SET(name, "StandardErrorFile", "StandardErrorFileToTruncate", "StandardErrorFileToAppend"));
 
                                 r = free_and_strdup(&c->stdio_file[STDERR_FILENO], empty_to_null(s));

From b3c2f6612c204d813e5c24b55981f59e0af53b48 Mon Sep 17 00:00:00 2001
From: Zsolt Dollenstein <zsol@fb.com>
Date: Wed, 4 Jul 2018 00:19:26 -0700
Subject: [PATCH 3/3] fix typo in test

---
 src/test/test-execute.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/test/test-execute.c b/src/test/test-execute.c
index ac7c1823181..c19a2cae4fb 100644
--- a/src/test/test-execute.c
+++ b/src/test/test-execute.c
@@ -627,8 +627,8 @@ static void test_exec_standardinput(Manager *m) {
 
 static void test_exec_standardoutput(Manager *m) {
         test(m, "exec-standardoutput-file.service", 0, CLD_EXITED);
-        test(m, "exec-standardoutput-file-append.service", 0, CLD_EXITED);
-        test(m, "exec-standardoutput-file-truncate.service", 0, CLD_EXITED);
+        test(m, "exec-standardoutput-append.service", 0, CLD_EXITED);
+        test(m, "exec-standardoutput-truncate.service", 0, CLD_EXITED);
 }
 
 static int run_tests(UnitFileScope scope, const test_function_t *tests) {
