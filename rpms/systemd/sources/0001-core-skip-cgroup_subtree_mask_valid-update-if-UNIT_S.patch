From a20a3e0986c3fa2d7b2bdb4d79c39d01148ff418 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Wed, 21 Nov 2018 12:01:01 -0800
Subject: [PATCH] core: skip cgroup_subtree_mask_valid update if UNIT_STUB

When a nested slice is being loaded for a service, the service may try to
propgate cgroup_subtree_mask upwards before the child slice is loaded setting
its cgroup_subtree_mask_valid prematurely.  When the child slice calls
unit_update_cgroup_members_masks() after finishing loading, because it's
already marked valid, the function becomes a noop and the cgroup_subtree_mask
fails to propagate upwards.  This could be easily triggered during user-@.slice
init.

Fix it by turning unit_update_cgroup_members_masks() noop for units in STUB
load state so that the first update is always after the unit is loaded.
---
 src/core/cgroup.c |    6 ++++++
 1 file changed, 6 insertions(+)

--- a/src/core/cgroup.c
+++ b/src/core/cgroup.c
@@ -1382,6 +1382,12 @@ void unit_update_cgroup_members_masks(Un
 
         assert(u);
 
+        /* Don't update on a stub as it can mark subtree_mask valid
+         * prematurely and prevent the needed update after it is
+         * actually loaded */
+        if (u->load_state == UNIT_STUB)
+                return;
+
         /* Calculate subtree mask */
         m = unit_get_subtree_mask(u);
 
